{"version":3,"sources":["polls.service.ts"],"names":[],"mappings":"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","file":"polls.service.js","sourcesContent":["import {Injectable, EventEmitter} from \"@angular/core\";\r\nimport {Http, Response, Headers, RequestOptions} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\nimport {Poll} from \"./Poll\";\r\n\r\n@Injectable()\r\nexport class PollsService {\r\n\tallPolls: Poll[];\r\n\tpollUpdated: EventEmitter<Poll> = new EventEmitter<Poll>();\r\n\t\r\n\tconstructor (private http: Http) { }\r\n\t\r\n\tprivate parseData(res: Response) {\r\n\t\tif (res.status < 200 || res.status >= 300) {\r\n\t\t\tthrow new Error(`Response status: ${res.status}`);\r\n\t\t}\r\n\t\tlet body = res.json();\r\n\t\treturn body;\r\n\t}\r\n\r\n\tprivate handleError(error: any) {\r\n\t\tlet errMsg = error.message || 'Server error';\r\n\t\tconsole.log(errMsg);\r\n\t\treturn Observable.throw(errMsg);\r\n\t}\r\n\t\r\n\tgetAllPolls() {\r\n\t\tif (this.allPolls) return Promise.resolve(this.allPolls);\r\n\t\telse {\r\n\t\t\treturn this.http\r\n\t\t\t\t\t\t.get('/api/polllist')\r\n\t\t\t\t\t\t.toPromise()\r\n\t\t\t\t\t\t.then(this.parseData)\r\n\t\t\t\t\t\t.catch(this.handleError)\r\n\t\t}\r\n\t}\r\n\t\r\n\tcreatePoll(poll: Poll) {\r\n\t\tlet stringyPoll = JSON.stringify(poll);\r\n\t\tlet headers = new Headers({ 'Content-Type': 'application/json' });\r\n\t\tlet options = new RequestOptions({ headers: headers })\r\n\t\treturn this.http\r\n\t\t\t\t\t.post('/api/newpoll', stringyPoll, options)\r\n\t\t\t\t\t.toPromise()\r\n\t\t\t\t\t.then(this.parseData)\r\n\t\t\t\t\t.then(res => res.poll)\r\n\t\t\t\t\t.catch(this.handleError);\r\n\t}\r\n\t\r\n\tsubmitVote(poll: Poll, choiceText: string) {\r\n\t\tlet body = JSON.stringify({\r\n\t\t\tpoll: poll,\r\n\t\t\tchoiceText: choiceText\r\n\t\t});\r\n\t\tlet headers = new Headers({ 'Content-Type': 'application/json' });\r\n\t\tlet options = new RequestOptions({ headers: headers });\r\n\t\treturn this.http\r\n\t\t\t\t\t.post('/api/submitvote', body, options)\r\n\t\t\t\t\t.toPromise()\r\n\t\t\t\t\t.then(this.parseData)\r\n\t\t\t\t\t.then(res => {\r\n\t\t\t\t\t\tthis.pollUpdated.emit(res.poll);\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.catch(this.handleError);\r\n\t}\r\n\t\r\n\tdeletePoll(poll: Poll) {\r\n\t\tlet body = JSON.stringify({poll: poll});\r\n\t\tlet headers = new Headers({ 'Content-Type': 'application/json' });\r\n\t\tlet options = new RequestOptions({ headers: headers });\r\n\t\treturn this.http\r\n\t\t\t\t\t.post('/api/deletepoll', body, options)\r\n\t\t\t\t\t.toPromise()\r\n\t\t\t\t\t.then(this.parseData)\r\n\t\t\t\t\t.catch(this.handleError);\r\n\t}\r\n}"]}