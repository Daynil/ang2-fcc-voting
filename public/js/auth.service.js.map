{"version":3,"sources":["auth.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAKA;gBACC,qBAAqB,IAAU;oBAAV,SAAI,GAAJ,IAAI,CAAM;gBAAI,CAAC;gBAE5B,+BAAS,GAAjB,UAAkB,GAAa;oBAC9B,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC;wBAC3C,MAAM,IAAI,KAAK,CAAC,sBAAoB,GAAG,CAAC,MAAQ,CAAC,CAAC;oBACnD,CAAC;oBACD,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;oBACtB,MAAM,CAAC,IAAI,CAAC;gBACb,CAAC;gBAEO,iCAAW,GAAnB,UAAoB,KAAU;oBAC7B,IAAI,MAAM,GAAG,KAAK,CAAC,OAAO,IAAI,cAAc,CAAC;oBAC7C,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;oBACpB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;gBACjC,CAAC;gBAED,sCAAgB,GAAhB;oBACC,MAAM,CAAC,IAAI,CAAC,IAAI;yBACZ,GAAG,CAAC,kBAAkB,CAAC;yBACvB,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;yBACnB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAC7B,CAAC;gBAED,uCAAiB,GAAjB;oBAAA,iBAmBC;oBAlBA,MAAM,CAAC,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;wBAClC,KAAI,CAAC,gBAAgB,EAAE,CAAC,SAAS,CAAC,UAAA,UAAU;4BAC3C,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gCACjB,IAAI,aAAW,GAAG,MAAM,CAAC,IAAI,CAAC,mCAAmC,EAC1D,cAAc,EACd,0CAA0C,CAAC,CAAC;gCACnD,IAAI,eAAa,GAAG,MAAM,CAAC,WAAW,CAAC;oCACtC,EAAE,CAAC,CAAC,aAAW,CAAC,MAAM,CAAC,CAAC,CAAC;wCACxB,MAAM,CAAC,aAAa,CAAC,eAAa,CAAC,CAAC;wCACpC,OAAO,EAAE,CAAC;oCACX,CAAC;gCACF,CAAC,EAAE,IAAI,CAAC,CAAC;4BACV,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACP,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,SAAS,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,EAAE,EAAT,CAAS,CAAC,CAAC;4BAC3D,CAAC;wBACF,CAAC,CAAC,CAAA;oBAEH,CAAC,CAAC,CAAC;gBACJ,CAAC;gBA5CF;oBAAC,iBAAU,EAAE;;+BAAA;gBA6Cb,kBAAC;YAAD,CA5CA,AA4CC,IAAA;YA5CD,qCA4CC,CAAA","file":"auth.service.js","sourcesContent":["import {Injectable} from \"@angular/core\";\r\nimport {Http, Response} from \"@angular/http\";\r\nimport {Observable} from \"rxjs/Observable\";\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\tconstructor (private http: Http) { }\r\n\t\r\n\tprivate parseData(res: Response) {\r\n\t\tif (res.status < 200 || res.status >= 300) {\r\n\t\t\tthrow new Error(`Response status: ${res.status}`);\r\n\t\t}\r\n\t\tlet body = res.json();\r\n\t\treturn body;\r\n\t}\r\n\t\r\n\tprivate handleError(error: any) {\r\n\t\tlet errMsg = error.message || 'Server error';\r\n\t\tconsole.log(errMsg);\r\n\t\treturn Observable.throw(errMsg);\r\n\t}\r\n\t\r\n\tcheckLoggedState(): Observable<boolean> {\r\n\t\treturn this.http\r\n\t\t\t\t\t.get('/auth/checkCreds')\r\n\t\t\t\t\t.map(this.parseData)\r\n\t\t\t\t\t.catch(this.handleError);\r\n\t}\r\n\t\r\n\thandleAuthLogging(): Promise<any> {\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tthis.checkLoggedState().subscribe(isLoggedIn => {\r\n\t\t\t\tif (!isLoggedIn) {\r\n\t\t\t\t\tlet oauthWindow = window.open('http://localhost:3000/auth/github',\r\n\t\t\t\t\t\t\t\t\t\t\t\t'OAuthConnect',\r\n\t\t\t\t\t\t\t\t\t\t\t\t'location=0,status=0,width=800,height=400');\r\n\t\t\t\t\tlet oauthInterval = window.setInterval(() => {\r\n\t\t\t\t\t\tif (oauthWindow.closed) {\r\n\t\t\t\t\t\t\twindow.clearInterval(oauthInterval);\r\n\t\t\t\t\t\t\tresolve();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}, 1000);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.http.get('/auth/logout').subscribe(res => resolve());\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t});\r\n\t}\r\n}"]}