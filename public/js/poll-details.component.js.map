{"version":3,"sources":["poll-details.component.ts"],"names":[],"mappings":"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","file":"poll-details.component.js","sourcesContent":["import {Component, Input, Output, EventEmitter,\r\n        ViewChild, AfterViewInit, ElementRef, \r\n        OnChanges, OnInit} from \"@angular/core\";\r\nimport {Poll, Choice} from \"./Poll\";\r\nimport {ChartService} from \"./chart.service\";\r\nimport {PollsService} from \"./polls.service\";\r\nimport {AuthService} from \"./auth.service\";\r\nimport {Credentials} from \"./User\";\r\nimport * as _ from 'lodash';\r\n\r\n@Component({\r\n    selector: 'poll-details',\r\n    styleUrls: ['../css/app.css'],\r\n    template: `\r\n        <div class=\"poll-details\">\r\n            <div id=\"details-question\">{{ poll.question }}</div>\r\n            <i *ngIf=\"creds.ownPoll\" id=\"delete-poll\" class=\"fa fa-times-circle\" aria-hidden=\"true\" \r\n                title=\"Delete My Poll\" (click)=\"deletePoll()\"></i>\r\n            <select name=\"pollChoices\" #choiceSelect (change)=\"checkCustomRequest(choiceSelect.value)\">\r\n                <option *ngFor=\"let choice of displayChoices\" [value]=\"choice.text\">{{ choice.text }}</option>\r\n            </select>\r\n            <div class=\"button\" id=\"vote-button\" (click)=\"submitVote(choiceSelect.value)\">Vote</div>\r\n            <input id=\"user-choice\" *ngIf=\"customRequest\" #userChoice placeHolder=\"Custom choice...\">\r\n            <div height=\"300\" width=\"300\">\r\n                <canvas #choicesChart id=\"choices-chart\"></canvas>\r\n            </div>\r\n            <div class=\"breadcrumb\" *ngIf=\"breadcrumbText\">{{ breadcrumbText }}</div>\r\n        </div>\r\n    `,\r\n    providers: [ChartService]\r\n})\r\nexport class PollDetails implements AfterViewInit, OnChanges, OnInit {\r\n    @Input() poll: Poll;\r\n    \r\n    @ViewChild('choicesChart') choicesChart: ElementRef;\r\n    @ViewChild('userChoice') userChoice: ElementRef;\r\n    \r\n    creds: Credentials = {user: null, loggedIn: false, ownPoll: false};\r\n    breadcrumbText: string = null;\r\n    displayChoices: Choice[];\r\n    customChoice = {\r\n                       text: \"I'd like a custom choice\",\r\n                       votes: 0\r\n                   };\r\n    customRequest = false;\r\n    \r\n    constructor(private chartService: ChartService,\r\n                private pollsService: PollsService,\r\n                private authService: AuthService) {\r\n                    this.authService.loginEvent.subscribe(creds => this.onLoginEvent(creds));\r\n                }\r\n                \r\n    ngOnInit() {\r\n        this.displayChoices = this.poll.choices.slice();\r\n        this.authService.checkLoggedState().then(res => {\r\n            this.creds = res;\r\n            if (this.creds.loggedIn) {\r\n                this.adjustDisplayChoices(this.creds.loggedIn);\r\n                this.creds.ownPoll = this.creds.user.githubID === this.poll.creator;\r\n            }\r\n        });\r\n    }\r\n    \r\n    ngAfterViewInit() {\r\n        this.generateChart(this.choicesChart.nativeElement);\r\n    }\r\n    \r\n    ngOnChanges(changes) {\r\n        if (this.creds.user) {\r\n            this.adjustDisplayChoices(this.creds.loggedIn);\r\n            this.creds.ownPoll = this.creds.user.githubID === this.poll.creator;\r\n        }\r\n        if (this.choicesChart) this.chartService.nextChart(this.choicesChart.nativeElement, this.poll.choices);\r\n    }\r\n    \r\n    onLoginEvent(creds: Credentials) {\r\n        this.creds = creds;\r\n        this.adjustDisplayChoices(creds.loggedIn);\r\n        if (this.creds.user) this.creds.ownPoll = this.creds.user.githubID === this.poll.creator;\r\n    }\r\n    \r\n    adjustDisplayChoices(loggedIn: boolean) {\r\n        this.displayChoices = this.poll.choices.slice();\r\n        if (loggedIn) {\r\n            this.displayChoices.push(this.customChoice);\r\n        }\r\n    }\r\n        \r\n    generateChart(el: HTMLCanvasElement) {\r\n        this.chartService.createChart(el, this.poll.choices);\r\n    }\r\n    \r\n    checkCustomRequest(selectedChoice: string) {\r\n        if (selectedChoice === this.customChoice.text) this.customRequest = true;\r\n        else this.customRequest = false;\r\n    }\r\n    \r\n    submitVote(existingChoice: string) {\r\n        let choiceSelection = existingChoice;\r\n        if (this.customRequest) {\r\n            let customChoiceText = this.userChoice.nativeElement.value;\r\n            if (customChoiceText.length < 1) return;\r\n            else {\r\n                choiceSelection = customChoiceText;\r\n                this.userChoice.nativeElement.value = '';\r\n            }\r\n        }\r\n        this.pollsService.submitVote(this.poll, choiceSelection)\r\n            .then(res => {\r\n                this.poll = res.poll;\r\n                this.chartService.updateChart(this.poll.choices);\r\n                this.breadcrumb(`Voted for ${choiceSelection}`);\r\n            });\r\n    }\r\n    \r\n    deletePoll() {\r\n        if (confirm(\"Are you sure you want to delete your poll?\")) {\r\n            this.pollsService.deletePoll(this.poll);\r\n        }\r\n    }\r\n    \r\n    breadcrumb(text: string) {\r\n        this.breadcrumbText = text;\r\n        window.setTimeout(() => this.breadcrumbText = null, 2000);\r\n    }\r\n\r\n}"]}